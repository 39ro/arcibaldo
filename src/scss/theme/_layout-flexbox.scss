/*
 * 1.1 - Layout Flexbox
 */

// Block-level

.row__container,
.rc {
	display: flex;
	flex-direction: row;
}

.col__container,
.cc {
	display: flex;
	flex-direction: column;
}

.row__container-reverse,
.rc_r {
	display: flex;
	flex-direction: row-reverse;
}

.col__container-reverse,
.cc_r {
	display: flex;
	flex-direction: column-reverse;
}

// Inline-level

.row__container_inline,
.rc_inline {
	display: inline-flex;
	flex-direction: row;
}

.col__container_inline,
.cc_inline {
	display: inline-flex;
	flex-direction: column;
}

.col__container-reverse_inline,
.cc_r_inline {
	display: inline-flex;
	flex-direction: column-reverse;
}

.row__container-reverse_inline,
.rc_r_inline {
	display: inline-flex;
	flex-direction: row-reverse;
}

// Flex Line Wrapping

// Value:	nowrap | wrap | wrap-reverse
// Initial:	nowrap
// Applies to: flex containers

.f__wrap,
.f_wrap {
	flex-wrap: wrap;
}

.f__wrap,
.f_nowrap {
	flex-wrap: nowrap;
}

.f__wrap-reverse,
.f_wrap-reverse {
	flex-wrap: wrap-reverse;
}

// Axis Alignment

// Value:	flex-start | flex-end | center | space-between | space-around
// Initial:	flex-start
// Applies to: flex containers

.f__justify-content_flex-start,
.f_jc_fs {
	justify-content: flex-start;
}

.f__justify-content_flex-end,
.f_jc_fe {
	justify-content: flex-end;
}

.f__jc_center,
.f_jc_c {
	justify-content: center;
}

.f__justify-content_space-between,
.f_jc_sb {
	justify-content: space-between;
}

.f__justify-content_space-around,
.f_jc_sa {
	justify-content: space-around;
}


// Cross-axis Alignment

//Value: flex-start | flex-end | center | baseline | stretch
//Initial: stretch
//Applies to: flex containers

.f__align-items_flex-start,
.f_ai_fs {
	align-items: flex-start;
}

.f__align-items_flex-end,
.f_ai_fe {
	align-items: flex-end;
}

.f__align-items_center,
.f_ai_c {
	align-items: center;
}

.f__align-items_baseline,
.f_ai_baseline {
	align-items: baseline;
}

.f__align-items_stretch,
.f_ai_stretch {
	align-items: stretch;
}

// Value:	auto | flex-start | flex-end | center | baseline | stretch
// Initial:	auto
// Applies to: flex items

.f__align-self_auto,
.f_as_auto {
	align-self: auto;
}

.f__align-self_flex-start,
.f_as_fs {
	align-self: flex-start;
}

.f__align-self_flex-end,
.f_as_fe {
	align-self: flex-end;
}

.f__align-self_c,
.f_as_c {
	align-self: center;
}

.f__align-self_baseline,
.f_as_baseline {
	align-self: baseline;
}

.f__align-self_stretch,
.f_as_stretch {
	align-self: stretch;
}

// Packing Flex Lines
// Value:	flex-start | flex-end | center | space-between | space-around | stretch
// Initial:	stretch
// Applies to: multi-line | flex containers

.f__align-content_flex-start,
.f_ac_fs {
	align-content: flex-start;
}

.f__align-content_flex-end,
.f_ac_fe {
	align-content: flex-end;
}

.f__align-content_center,
.f_ac_c {
	align-content: center;
}

.f__align-content_space-between,
.f_ac_sb {
	align-content: space-between;
}

.f__align-content_space-around,
.f_ac_sa {
	align-content: space-around;
}

.f__align-content_stretch,
.f_ac_stretch {
	align-content: stretch;
}

// Flex: This is a shorthand property that sets flex-grow, flex-shrink, and flex-basis.
// flex-grow: Defines the flex-grow of the flex item. Negative values are considered invalid. Defaults to 1 when omitted.
// flex-shrink: Defines the flex-shrink of the flex item. Negative values are considered invalid. Defaults to 1 when omitted.
// flex-basis: Defines the flex-basis of the flex item. Any value valid for width and height properties are accepted. A preferred size of 0 must have a unit to avoid being interpreted as a flexibility. Defaults to 0 when omitted.
// none: This keyword computes to 0 0 auto.

.f_auto {
	flex: 1 0 auto;
}

@for $i from 1 through 100 {
	.f_#{$i} {
		flex: 1 0 #{$i + '%'};
	}
}

.fs_auto {
	flex: 1 1 auto;
}

@for $i from 1 through 100 {
	.fs_#{$i} {
		flex: 1 1 #{$i + '%'};
	}
}

