/*
 * 1.1 - Layout Flexbox
 */

// Direction

.container, .c, %c {
  display: flex;
}

.row_container, .rc {
  @extend %c;
  flex-direction: row;
}

.col_container, .cc {
  @extend %c;
  flex-direction: column;
}

.col_container_reverse, .cc_r {
  @extend %c;
  flex-direction: column-reverse;
}

.col_container_reverse, .rc_r {
  @extend %c;
  flex-direction: row-reverse;
}

// Items

.flex_jifs, .f_jifs {
  justify-items: flex-start;
}

.flex_jic, .f_jic {
  justify-items: center;
}

.flex_jife, .f_jife {
  justify-items: flex-end;
}

.flex_jib, .f_jib {
  justify-items: baseline;
}

.flex_jis, .f_jis {
  justify-items: stretch;
}

.flex_aifs, .f_aifs {
  align-items: flex-start;
}

.flex_aic, .f_aic {
  align-items: center;
}

.flex_aife, .f_aife {
  align-items: flex-end;
}

.flex_aib, .f_aib {
  align-items: baseline;
}

.flex_ais, .f_ais {
  align-items: stretch;
}

// Content

.flex_jcfs, .f_jcfs {
  justify-content: flex-start;
}

.flex_jcc, .f_jcc {
  justify-content: center;
}

.flex_jcfe, .f_jcfe {
  justify-content: flex-end;;
}

.flex_jcsa, .f_jcsa {
  justify-content: space-around;
}

.flex_jcsb, .f_jcsb {
  justify-content: space-between;
}

.flex_jcs, .f_jcs {
  justify-content: stretch;
}

.flex_acfs, .f_acfs {
  align-content: flex-start;
}

.flex_acc, .f_acc {
  align-content: center;
}

.flex_acfe, .f_acfe {
  align-content: flex-end;
}

.flex_acsa, .f_acsa {
  align-content: space-around;
}

.flex_acsb, .f_acsb {
  align-content: space-between;
}

.flex_acs, .f_acs {
  align-content: stretch;
}

// Self

.flex_jsfs, .f_jsfs {
  justify-self: flex-start;
}

.flex_jsc, .f_jsc {
  justify-self: center;
}

.flex_jsfe, .f_jsfe {
  justify-self: flex-end;
}

.flex_asfs, .f_asfs {
  align-self: flex-start;
}

.flex_asc, .f_asc {
  align-self: center;
}

.flex_asfe, .f_asfe {
  align-self: flex-end;
}

// Wrap

.flex_wrap, .f_wrap {
  flex-wrap: wrap;
}

.flex_wrap, .f_nowrap {
  flex-wrap: nowrap;
}

.flex_wrap-reverse, .f_wrap-reverse {
  flex-wrap: wrap-reverse;
}

// Flex: This is a shorthand property that sets flex-grow, flex-shrink, and flex-basis.
// @flex-grow: Defines the flex-grow of the flex item. See <number> for more details. Negative values are considered invalid. Defaults to 1 when omitted.
// @flex-shrink: Defines the flex-shrink of the flex item. See <number> for more details. Negative values are considered invalid. Defaults to 1 when omitted.
// @flex-basis: Defines the flex-basis of the flex item. Any value valid for width and height properties are accepted. A preferred size of 0 must have a unit to avoid being interpreted as a flexibility. Defaults to 0 when omitted.
// @none: This keyword computes to 0 0 auto.

.f_auto {
  flex: 1 0 auto;
}

@for $i from 1 through 100 {
  .f_#{$i} {
    flex: 1 0 #{$i + '%'};
  }
}

.fs_auto {
  flex: 1 1 auto;
}

@for $i from 1 through 100 {
  .fs_#{$i} {
    flex: 1 1 #{$i + '%'};
  }
}

// Layout containers

.main_container {
  @extend %c;
  justify-content: center;
}

.fix_container {
  width: 100%;
  max-width: $flex-fix-container-width;
}
